/////////////////////////////////////////////////////////////////////////////////////////////////// DEMO CODE //////////////////////////////////////////////////////////////////////////////////////////////

//////////////////// 0 //////////////////////
print( "Result of function 0")

// This is a comment 
let square x = x * x
print( square  3)

//////////////////// 1 //////////////////////
print( "Result of function 1")

// let demo1 =
// 	let addxy = x y
// 	let addy = addxy 2
//	addy 3

let addxy x y = x + y
let addy = addxy 2
print( addy 3 )

//////////////////// 2 //////////////////////
print( "Result of function 2")

// let demo2 =
//     let addp f x = f x + f x
//     addp (fun x -> x * 2) 3

let addp f x = f x + f x
print ( addp ( fun x = x * 2 ) 3 )

//////////////////// 3 //////////////////////
print( "Result of function 3")

// let demo3 =
//     let gf y =  
//         let fmul x = x * x
//         fmul y
//     gf 2

let fmul x = x * x
let gf y = fmul y
print( gf 2 )

//////////////////// 4 //////////////////////
print( "Result of function 4")

// let demo4 = 
//     let h x y =
//         let f x = x * x
//         let g y = y * y
//         f x + g y 
//     h 2 3

let f x = x * x
let g y = y * y
let h x y = f x + g y
print( h 2 3 )

//////////////////// 5 //////////////////////
print( "Result of function 5")

// let demo5 =
//     let rec increment x i =
//         if x < 10 
//        then increment (x+1) (i+1)
//         else i
//     increment -2 0

let rec increment x i = if equals x 10 then i else increment (x+1) (i+1) fi
print( increment -2 0 )

//////////////////// 6 //////////////////////
print( "Result of function 6")

// let demo6 = 
//     List.map (fun x -> x * x) [1;2;5]

let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
print ( lstmap ( fun x = x * x ) [ 1 ; 2 ; 5 ] )

//////////////////// 7 //////////////////////
print( "Result of function 7")

// let demo7 = 
//     List.map (fun str -> explode x) ["aloha";"mahalo";"wakiki"]

let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
print ( lstmap ( fun str = explode str ) ["aloha";"mahalo";"wakiki"] )

//////////////////// 8 //////////////////////
print( "Result of function 8")

// let demo7 = 
//     List.map (fun str -> implode x) [ ["a";"l";"o";"h";"a"];["m";"a";"h";"a";"l";"o"];["w";"a";"k";"i";"k";"i"] ]

let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
print ( lstmap ( fun lst = implode lst ) [ ["a"; "l"; "o" ; "h" ; "a"] ; ["m"; "a"; "h" ; "a" ; "l" ; "o"] ; ["w"; "a"; "k" ; "i" ; "k"; "i"] ] )

//////////////////// 9 //////////////////////
print( "Result of function 9")

// let demo9 =
//     let fPair x = 
//         (List.map (fun x -> x*x) (fst x), List.map (fun x -> x-2) (snd x))
//    fPair ([ 1 ; 2 ; 3 ] , [ 2 ; 4 ; 5 ] )

let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
let f x = lstmap ( fun x = x * x ) ( fst x )
let g x = lstmap ( fun x = x - 2 ) ( fst (snd x) )
let h x = [ f x  ; g x ]
print ( h [ [ 1 ; 2 ; 3 ] ; [ 2 ; 4 ; 5 ] ] )

//////////////////// 10 //////////////////////
print( "Result of function 10")

// let demo10 = 
//     let lst1 = [1..5]
//     let makePair a b = (a, b)
//     let pairWithOne = makePair 1
//     let combinationsWithOne = 
//         List.map pairWithOne lst1
//     combinationsWithOne 

let lsti = [1 ; 2 ; 3 ; 4 ; 5 ]
let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
let makepair a b = [ a ; b ]
let pairwithone = makepair 1
print ( lstmap pairwithone lsti )

//////////////////// 11 //////////////////////
print( "Result of function 11")

// let demo11 = 
//     let lst1 = [1..5]
//     let lst2 = [6..10]
//     let makePair a b = (a,b)
//     let makeColumn lst x =
//         let pairWithX = makePair x
//         List.map pairWithX lst
//     List.map (makeColumn lst2) lst1


let lsta = [1 ; 2 ; 3 ; 4 ; 5 ]
let lstb = [1 ; 2 ; 3 ; 4 ; 5 ]
let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi
let makepair a b = [ a ; b ]
let pairwithx x = makepair x
let makecolumn lst x = lstmap (pairwithx x) lst
print ( lstmap (makecolumn lsta) lstb )


//////////////////// 12 //////////////////////
print( "Result of function 12")

// let demo12 = 
//     let lst1 = [1..5]
//     List.reduce (+) lst1

let rec lstreduce func lst i = if equals lst [ ] then i else lstreduce func ( snd lst ) ( func i (fst lst) ) fi
let lreduce func lst = lstreduce func (snd lst) ( fst lst )
let addxy x y = x + y
let lsta = [1 ; 2 ; 3 ; 4 ; 5 ]
print( lreduce addxy lsta)

//////////////////// 13 //////////////////////
print( "Result of function 13")

// let demo13 = 
// 	let listn b e = [b..e]
// 	listn 0 10

let rec listn b e lst = if equals e b then pair b lst else listn b ( e - 1 ) (pair e lst) fi
let listbe b e = listn b e [ ]
print( listbe 0 10 )


//////////////////// 14 //////////////////////
print( "Result of function 14")

// let demo14 =  
//     let fact n =
//         if n = 0
//         then 1
//         else List.reduce (*) [1..n]
//     let sum x n =
//         let term i =
//             (x * x / fact i)
//         [0..n] |> List.map term |> List.reduce (+)
//     sum 2 4

let rec lstreduce func lst i = if equals lst [ ] then i else lstreduce func ( snd lst ) ( func i (fst lst) ) fi
let lreduce func lst = lstreduce func (snd lst) ( fst lst )
let mulxy x y = x * y
let addxy x y = x + y

let rec listna b e lst = if equals e b then pair b lst else listn b ( e - 1 ) (pair e lst) fi
let listbea b e = listn b e [ ]

let fact n = if equals n 0 then 1 else lreduce mulxy ( listbea 1 n ) fi

let term x i = ( x * x ) / fact i

let pipea n = listbea 0 n
let pipeb x n = lstmap ( term x ) ( pipea n )
let sum x n = lreduce addxy ( pipeb x n )

print( sum 2 4 )

// let funca i x = x * i 
// let test i = lstmap ( funca i ) ( pipea 4 ) )
// print( test 2 )


//////////////////// 15 //////////////////////
print( "Result of function 15")

let fa = [ ]
let fb = [ 1 ; 2 ; 3 ; 4 ; 5 ]
let fc = [ 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ]
let fd = [ 1 ]

let g = 2
let matchfirst lst =  match lst case [ ] -> 2 case [ x ; y ; z ; a ; b ; c ; d ] -> 1 + x + g case [ x ; y ] -> 2 + g + x case [ x ] -> 3 case endmatch
print( "1st case")
print( matchfirst fa )
print( "2nd case")
print( matchfirst fb )
print( "3rd case")
print( matchfirst fc )
print( "4th case")
print( matchfirst fd )

//////////////////// 16 //////////////////////
print( "Result of function 16" )

// let demo16 =  
//     let rec length lst i = 
//        match lst with 
//         | [] -> i
//         | _ :: y -> length y (i+1)
//     length [1;2;3;4;5] 0

let lsta = [ 1 ; 2 ; 3 ; 4 ; 5 ]
let rec lengthini lst i =  match lst case [ ] -> i case [ x ; y ] -> lengthini y ( i + 1 ) case endmatch
let length lst = lengthini lst 0
print( length lsta )

//////////////////// 17 //////////////////////
print( "Result of function 17" )

// let demo16 = 
//     let lst1 = [1..5]
//     List.reduce (+) lst1

let lsta = [ 1 ; 2 ; 3 ; 4 ; 5 ]
let addxy x y = x + y
let rec lstreduce func lst i =  match lst case [ ] -> i case [ x ; y ] -> lstreduce func y ( func i x ) case endmatch
print( lstreduce addxy lsta 0 )

// print( ( fun x y = x + y ) 4 5 )

//////////////////// 18 //////////////////////
print( "Result of function 18" )

// let rec append a b =
//     match a, b with
//     | [], ys -> ys
//     | x::xs, ys -> x::append xs ys

let rec append a b =  match a case [ ] -> b case [ x ; y ] -> pair x ( append y b ) case endmatch
print ( append [ 1 ; 2 ; 3 ; 6 ] [ 5 ; 4 ] )

//////////////////// 19 ////////////////////// MERGE SORT //////////////////////
print( "Result of function 19" )

let rec lengthini lst i =  match lst case [ ] -> i case [ x ; y ] -> lengthini y ( i + 1 ) case endmatch
let length lst = lengthini lst 0

let rec reverseini a b = match a case [ ] -> b case [ x ; y ] -> reverseini y ( pair x b ) case endmatch
let reverse a = reverseini a [ ]

let rec listsplitini a b i = if equals i 0 then [ reverse b  ; a ] else match a case [ x ; y ] -> listsplitini y ( pair x b ) ( i - 1 ) case endmatch fi
let listsplit i lst = listsplitini lst [] i

print ( listsplit 2 [ 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ] )

// let matchlength lst =  match ( [ length lst ] ) case [ 0 ] -> lst case [ 1 ] -> lst case [ n ] -> fst n case endmatch
// print( matchlength [ 2 ; 3 ; 4 ; 5 ] )











