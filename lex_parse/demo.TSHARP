/////////////////////////////////////////////////////////////////////////////////////////////////// DEMO CODE //////////////////////////////////////////////////////////////////////////////////////////////

//////////////////// 1 //////////////////////

// This is a comment 
let square x = x * x
print( square  3)

//////////////////// 2 //////////////////////

// let demo2 =
//     let g f x = f x + f x
//     g (fun x -> x * 2) 3

print ( let g f x = f x + f x in g ( fun x = x * 2 ) 3 )

//////////////////// 3 //////////////////////

// let demo3 =
//     let g y =  
//         let f x = x * x
//         f y
//     g 2

print( let f x = x * x in let g y = f y in g 2 )

//////////////////// 4 //////////////////////

// let demo4 = 
//     let h x y =
//         let f x = x * x
//         let g y = y * y
//         f x + g y 
//     h 2 3

print( let f x = x * x in let g y = y * y in let h x y = f x + g y in h 2 3 )

//////////////////// 5 //////////////////////

// let demo5 =
//     let rec increment x i =
//         if x < 10 
//        then increment (x+1) (i+1)
//         else i
//     increment -2 0

print( let rec f x i = if equals x 10 then i else f (x+1) (i+1) fi in f -2 0 )

//////////////////// 6 //////////////////////

// let demo6 = 
//     List.map (fun x -> x * x) [1;2;5]

print ( let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi in lstmap ( fun x = x * x ) [ 1 ; 2 ; 5 ] )

//////////////////// 7 //////////////////////

print ( let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi in let f x = lstmap ( fun x = x * x ) x in f [ 1 ; 2 ; 5 ] )

//////////////////// 8 //////////////////////

print ( let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi in let f x = lstmap ( fun x = x * x ) ( fst x ) in let g y = 2*y in let h x y = [ ( f x ) ; g y ] in h [ [ 1 ; 2 ; 3 ] ; [ 2 ; 4 ; 5 ] ] 3 )

print ( let rec lstmap func lst = if equals lst [ ] then [ ] else pair ( func ( fst lst ) ) ( lstmap func ( snd lst ) ) fi in let f x = lstmap ( fun x = x * x ) ( fst x ) in let g x = lstmap ( fun x = x - 2 ) ( fst x ) in let h x = [ f x  ; g x ] in h [ [ 1 ; 2 ; 3 ] ; [ 2 ; 4 ; 5 ] ] )





//////////////////// 9 //////////////////////

















